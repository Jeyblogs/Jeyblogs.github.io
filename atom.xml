<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jey</title>
  <subtitle>Keep Calm and Carry On</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jeyblogs.com/"/>
  <updated>2016-08-17T09:09:38.000Z</updated>
  <id>http://www.jeyblogs.com/</id>
  
  <author>
    <name>Jey.yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Alcatraz来管理Xcode插件</title>
    <link href="http://www.jeyblogs.com/2014/06/12/%E4%BD%BF%E7%94%A8Alcatraz%E6%9D%A5%E7%AE%A1%E7%90%86Xcode%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.jeyblogs.com/2014/06/12/使用Alcatraz来管理Xcode插件/</id>
    <published>2014-06-12T08:06:36.000Z</published>
    <updated>2016-08-17T09:09:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xsdar.com1.z0.glb.clouddn.com/Alcatraz.png" alt="" title="img"></p>
<h5 id="￼简介"><a href="#￼简介" class="headerlink" title="￼简介"></a>￼简介</h5><p>Alcatraz 是一个帮你管理 Xcode 插件、模版以及颜色配置的工具。它可以直接集成到 Xcode 的图形界面中，让你感觉就像在使用 Xcode 自带的功能一样。</p>
<h5 id="安装和删除"><a href="#安装和删除" class="headerlink" title="安装和删除"></a>安装和删除</h5><p>使用如下的命令行来安装 Alcatraz：<br>    mkdir -p ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins;</p>
<pre><code>curl -L http://git.io/lOQWeA | tar xvz -C ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins
</code></pre><p>如果你不想使用 Alcatraz 了，可以使用如下命令来删除：<br>    rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</p>
<pre><code>rm -rf ~/Library/Application\ Support/Alcatraz
</code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>安装成功后重启 Xcode，就可以在 Xcode 的顶部菜单中找到 Alcatraz，如下所示：<img src="http://7xsdar.com1.z0.glb.clouddn.com/Alcatraz-1.png" alt=""><br>￼<br>点击 “Package Manager”，即可启动插件列表页面，如下所示：<br>￼<img src="http://7xsdar.com1.z0.glb.clouddn.com/Alcatraz-2.png" alt=""><br>之后你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装KImageNamed插件：<br>￼<img src="http://7xsdar.com1.z0.glb.clouddn.com/Alcatraz-3.png" alt=""><br>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>
<h5 id="插件路径"><a href="#插件路径" class="headerlink" title="插件路径"></a>插件路径</h5><p>Xcode 所有的插件都安装在目录/Library/Application Support/Developer/Shared/Xcode/Plug-ins/下，你也可以手工切换到这个目录来删除插件。</p>
<h5 id="推荐的插件"><a href="#推荐的插件" class="headerlink" title="推荐的插件"></a>推荐的插件</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsdar.com1.z0.glb.clouddn.com/Alcatraz.png&quot; alt=&quot;&quot; title=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;￼简介&quot;&gt;&lt;a href=&quot;#￼简介&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="插件" scheme="http://www.jeyblogs.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 上Top100 的 Objective-C 项目和</title>
    <link href="http://www.jeyblogs.com/2013/11/17/GitHub-%E4%B8%8ATop100-%E7%9A%84-Objective-C-%E9%A1%B9%E7%9B%AE%E5%92%8C/"/>
    <id>http://www.jeyblogs.com/2013/11/17/GitHub-上Top100-的-Objective-C-项目和/</id>
    <published>2013-11-17T02:50:17.000Z</published>
    <updated>2016-08-17T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>AFNetworking<br>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</li>
<li>GPUImage<br>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</li>
<li>SDWebImage<br>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</li>
<li>RestKit<br>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</li>
<li>ReactiveCocoa<br>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for Objective-C”, 也有人说它是 Cocoa 的未来, 具体可看唐巧写的这篇文章</li>
<li>three20<br>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品</li>
<li>MBProgressHUD<br>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</li>
<li>MagicalRecord<br>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</li>
<li>FMDB<br>一个对 SQLite 进行封装的库, 使用起来方便, 简单</li>
<li>Mantle<br>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了.</li>
<li>FlatUIKit<br>收集了很多扁平化 UI 的 iOS 组件, 方便使用</li>
<li>ASIHTTPRequest<br>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</li>
<li>FastImageCache<br>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</li>
<li>Masonry<br>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</li>
<li>Shimmer<br>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</li>
<li>SVProgressHUD<br>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</li>
<li>Slate<br>一款窗口管理应用程序, 但在两年前就已经停止更新了</li>
<li>JSONKit<br>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</li>
<li>Nimbus<br>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</li>
<li>CocoaLumberjack<br>这是 Mac 和 iOS 的一款强大的日志框架, 配置简单, 多线程, 提供更高级的 log 功能, 可用于代替默认的 NSLog 语句</li>
<li>Facebook SDK for iOS<br>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</li>
<li>AsyncDisplayKit<br>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</li>
<li>Alcatraz<br>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</li>
<li>ViewDeck<br>一款开源的 iOS 活动面板组件, 还原 Path 2.0 的侧滑效果, 作者因为时间关系在两年前停止对其更新</li>
<li>JSQMessagesViewController<br>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</li>
<li>FLEX<br>这是 Flipboard 官方发布的一组专门用于 iOS 开发的应用内调试工具, 开发者无需将其连接到 LLDB/Xcode 或其他远程调试服务器,支持直接在 App 中运行</li>
<li>Xctool<br>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具</li>
<li>OpenEmu<br>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</li>
<li>iCarousel<br>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</li>
<li>RESideMenu<br>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8<br>321 PNChart<br>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱<br>31.2PonyDebugger<br>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</li>
<li>JVFloatLabeledTextField<br>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</li>
<li>SWTableViewCell<br>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</li>
<li>AwesomeMenu<br>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</li>
<li>Reachability<br>Reachablity 是用于检测 iOS 设备网络环境的库</li>
<li>VVDocumenter-Xcode<br>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</li>
<li>The Physical Web<br>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</li>
<li>NewsBlur<br>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</li>
<li>Cocos2D-SpriteBuilder<br>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</li>
<li>TTTAttributedLabel<br>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</li>
<li>CocoaAsyncSocket<br>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</li>
<li>TapkuLibrary<br>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</li>
<li>Canvas<br>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</li>
<li>SocketRocket<br>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</li>
<li>ECSlidingViewController<br>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</li>
<li>Json Framework<br>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</li>
<li>Tweaks<br>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</li>
<li>realm-cocoa<br>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</li>
<li>BlocksKit<br>一个开源的与 Cocoa 紧密集合的基础性框架</li>
<li>Appirater<br>一款用于提醒用户给你的 App 打分的工具</li>
<li>KIF<br>Square 出品的一个开源的用户界面测试框架, 极大的简化了 iOS 开发者的 UI 测试流程</li>
<li>SlackTextViewController<br>Slack 推出的一款具有文字输入框高度自适应, 自动输入, 复制单元格内容等功能的解决方案</li>
<li>JazzHands<br>IFTTT 开源的一个简单易用的关键帧基础动画框架, 可通过手势、scroll views, KVO, ReactiveCocoa 等方式来控制动画</li>
<li>Bolts-iOS<br>Bolts 是一个 Parse 和 Facebook 在内部使用的底层库, 方便移动开发</li>
<li>Spectacle<br>一款易用的 OS X 窗口分屏操作快捷键工具, 这是其源代码</li>
<li>nui<br>方便样式化 iOS 应用中的 UI 元素, 可在短时间内样式化整个应用, 类 CSS 原理</li>
<li>Induction<br>Induction 是一款用于理解数据关系的管理工具, 这是其程序代码</li>
<li>JSONModel<br>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</li>
<li>DTCoreText<br>一个开源的 iOS 富文本组件, 它可以解析 HTML 与 CSS 并最终用 CoreText 绘制出来, 通常用于在一些需要显示富文本的场景下代替低性能的 UIWebView</li>
<li>Popping<br>基于 Facebook Pop 引擎的 iOS 动画库, 集合了很多动画效果</li>
<li>TSMessages<br>一个用来弹出显示警告和通知的轻量级库, 样式丰富, 简单易用</li>
<li>KVOController<br>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</li>
<li>MWPhotoBrowser<br>一款简单的 iOS 照片浏览控件</li>
<li>MMDrawerController<br>一个轻量级, 易于使用的侧边抽屉导航 iOS 控件</li>
<li>QuickDialog<br>用于快速创建复杂的 iOS 表单, 自定义了 UITableViewCell, TableView 的样式</li>
<li>SVPullToRefresh<br>一款只需一行代码便可集成上拉刷新和下拉加载的组件</li>
<li>cheddar-ios<br>Cheddar 是一款简单易用的日程管理软件, 这是其早期版本的开源代码, 该项目已停止维护</li>
<li>XVim<br>一款在 Xcode 上实现了 Vim 功能的插件</li>
<li>EGOTableViewPullRefresh<br>一款提供下拉刷新的控件, 最后更新时间是一年前</li>
<li>iOS-boilerplate<br>iOS 应用程序的基础模板, 使用该模板可以省掉许多项目初始编码的工作, 内置非常多丰富的功能, 现已经停止维护</li>
<li>JASidePanels<br>一个 UIViewController 容器, 灵感来自 Facebook 和 Path 2.0 应用的菜单, 实现了左右侧滑的操作</li>
<li>FormatterKit<br>收集了很多构思优秀的 NSFormatter 子类<br>74.MSDynamicsDrawerViewController<br>实现了具有动态弹性效果的抽屉式侧边导航栏, 效果丰富, 可定制性强</li>
<li>idev-recipes<br>iDevRecipes 博客的代码, 演示如何实现一些有趣的控件, 该项目在两年前(2013)停止了更新</li>
<li>XMPPFramework<br>一个基于 RFC-3920 实现, 支持多线程和线程保护, 同时通用于所有的 iOS 和 Mac OS 开发设备的通信框架.</li>
<li>MacGap1<br>一款可以将 HTML/CSS/JS 网络应用打包成原生 Mac App 的工具</li>
<li>FXBlurView<br>iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果</li>
<li>iOS7-Sampler<br>整合演示了多个具有 iOS7 新特性的的项目, 提供了非常多的例子参考</li>
<li>PromiseKit<br>提供强大的 iOS 开发异步功能, 是 Promises 的实现, 受到广大开发者的追捧</li>
<li>Origami<br>此为 Facebook 推出的 Quartz Composer 的一个开源插件, 由其设计团队花费了 9 个月打造而成, 目的是为方便设计师快速构建原型, 以零代码完成复杂动画的合成和测试, 堪称神器</li>
<li>NSLogger<br>一款强大的日志分析工具, 具有大窗口查看 Log, 自定义日志等级等功能</li>
<li>KSImageNamed-Xcode<br>一款对 UIImage 的 imageNamed 提供自动补全功能的插件, 非常方便</li>
<li>PureLayout<br>一个简单却强大的 AutoLayout API 库, 兼容了 Objective-C 和 Swift, 扩展了 UIView/NSView, NSArray, 和 NSLayoutConstraint</li>
<li>AppleDoc<br>一款 Objective-C 文档生成工具, 生成的文档风格保持与 Apple 官方的一致, 极大的方便了 Xcode 识别自己写的 API 文档, 安装也是十分的简单</li>
<li>iTerm2<br>iTerm2 被不少程序员称赞为 Mac 下最好用的终端, 这是其源代码, 配合 oh-my-zsh 使用效果更佳</li>
<li>Kiwi<br>一个行为驱动开发测试框架, 适用于 iOS 平台, 旨在为开发者提供一个简单配置便可使用的 BDD 库</li>
<li>terminal-notifier<br>一款命令行工具, 用来给 Mac OS X 用户发送通知</li>
<li>MacDown<br>Mac OS X 下的一款开源的 Markdown 编辑器, 创意来自与 Mou, 使用 brew cask 即可完成安装</li>
<li>TwUI<br>Twitter 开源的一个支持硬件加速的 Mac 的 UI 框架, 最后一次的更新时间是在 3 年前(2012)</li>
<li>PaperFold for iOS<br>实现了类似折纸效果的视图切换, 可从不同方向进行切换, 该项目已经许久未更新</li>
<li>Reader<br>一款开源的 iOS PDF 阅读器, 附带书签, 列纲要等功能</li>
<li>WebViewJavascriptBridge<br>一个方便使用 Objective-C 与 JavaScript 进行通信的第三方库, 支持消息发送, 接收, 消息处理器的注册与调用以及设置消息处理的回调</li>
<li>iOS8-Sampler<br>iOSX-Sampler 系列之一, 整合演示了多个具有 iOS8 新特性的的项目, 提供了非常多的例子参考</li>
<li>CocoaHTTPServer<br>一个用于 Mac OS X 或 iOS 应用的轻量级、可嵌入的HTTP 服务器框架, 方便开发者在应用中嵌入一个 HTTP 服务器</li>
<li>Kod<br>Mac OS X 上一款专为程序员打造的编辑器, 这是其开源代码, 可惜的是作者在 2011 年停止了维护</li>
<li>TPKeyboardAvoiding<br>下拉键盘在 iOS 移动文本字段的通用解决方案, 能够自动处理键盘弹出后出现遮挡到文本输入框的问题</li>
<li>MKNetworkKit<br>一个轻量级网络请求框架, 完全基于 ARC, 仅有两个类, 具有自主操作多个网络请求, 更加准确的显示网络活动指标等优点</li>
<li>PKRevealController<br>一个 iOS 平台上的视图控制器集合, 通过展现多个视图控制器来进行控制器之间的切换. 设置简单, 高度灵活</li>
<li>AQGridView<br>一个命令行工具, 通过项目里的 .xcdatamodel 文件, 可以为每个 entity 生成两个类, 方便 CoreData 的使用</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;AFNetworking&lt;br&gt;作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation,
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="第三方资源" scheme="http://www.jeyblogs.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>超全面！常用的 iOS 第三方资源</title>
    <link href="http://www.jeyblogs.com/2013/11/15/%E8%B6%85%E5%85%A8%E9%9D%A2%EF%BC%81%E5%B8%B8%E7%94%A8%E7%9A%84%20iOS%20%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/"/>
    <id>http://www.jeyblogs.com/2013/11/15/超全面！常用的 iOS 第三方资源/</id>
    <published>2013-11-15T02:29:49.000Z</published>
    <updated>2016-08-17T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>一：第三方插件<br>1:基于响应式编程思想的oc<br>地址：<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">https://github.com/ReactiveCocoa/ReactiveCocoa</a><br>2：hud提示框<br>地址：<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">https://github.com/jdg/MBProgressHUD</a><br>3：XML/HTML解析<br>地址：<a href="https://github.com/topfunky/hpple" target="_blank" rel="external">https://github.com/topfunky/hpple</a><br>4：有文字输入时，能根据键盘是否弹出来调整自身显示内容的位置<br>地址：<a href="https://github.com/michaeltyson/TPKeyboardAvoiding" target="_blank" rel="external">https://github.com/michaeltyson/TPKeyboardAvoiding</a><br>5：状态栏提示框<br>地址：<a href="https://github.com/jaydee3/JDStatusBarNotification" target="_blank" rel="external">https://github.com/jaydee3/JDStatusBarNotification</a><br>6：block工具包。将很多需要用delegate实现的方法整合成了block的形式<br>地址：<a href="https://github.com/zwaldowski/BlocksKit" target="_blank" rel="external">https://github.com/zwaldowski/BlocksKit</a><br>7：图片加载<br>地址：<a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">https://github.com/rs/SDWebImage</a><br>8：正则表达式<br>地址：<a href="https://github.com/wezm/RegexKitLite" target="_blank" rel="external">https://github.com/wezm/RegexKitLite</a><br>9：Masonry代码布局<br>地址：<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">https://github.com/SnapKit/Masonry</a><br>10：弹出窗<br>地址：<a href="https://github.com/sberrevoets/SDCAlertView" target="_blank" rel="external">https://github.com/sberrevoets/SDCAlertView</a><br>11:Button的样式<br>地址：<a href="https://github.com/mattlawer/BButton" target="_blank" rel="external">https://github.com/mattlawer/BButton</a><br>12：验证网络连接状态<br>地址：<a href="https://github.com/tonymillion/Reachability" target="_blank" rel="external">https://github.com/tonymillion/Reachability</a><br>13：自动计算表格行高<br>地址：<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">https://github.com/forkingdog/UITableView-FDTemplateLayoutCell</a><br>14：动画效果的启动页<br>地址：<a href="https://github.com/IFTTT/JazzHands" target="_blank" rel="external">https://github.com/IFTTT/JazzHands</a><br>15：iOS快速简单集成国内三大平台分享<br>地址：<a href="https://github.com/xumeng/XMShareModule" target="_blank" rel="external">https://github.com/xumeng/XMShareModule</a><br>16：五项能力值展示的五边形<br>地址：<a href="https://github.com/dsxNiubility/SXFiveScoreShow" target="_blank" rel="external">https://github.com/dsxNiubility/SXFiveScoreShow</a><br>17：自动识别网址号码邮箱和表情的label<br>地址：<a href="https://github.com/molon/MLEmojiLabel" target="_blank" rel="external">https://github.com/molon/MLEmojiLabel</a><br>18：IM对话功能的封装<br>地址：<a href="https://github.com/ZhipingYang/UUChatTableView" target="_blank" rel="external">https://github.com/ZhipingYang/UUChatTableView</a><br>19：字典转模型框架<br>地址：<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">https://github.com/CoderMJLee/MJExtension</a><br>20：下拉上拉刷数据<br>地址：<a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">https://github.com/CoderMJLee/MJRefresh</a><br>21：表格行左右划动菜单<br>地址：<a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" rel="external">https://github.com/MortimerGoro/MGSwipeTableCell</a><br>22:图文混搭<br>地址:<a href="https://github.com/zhouande/TLAttributedLabel" target="_blank" rel="external">https://github.com/zhouande/TLAttributedLabel</a><br>23:可以简单展示在UINavigationBar下方，类似Music app的播放列表视图，弹出菜单视图<br>地址：<a href="https://github.com/DrummerB/BFNavigationBarDrawer" target="_blank" rel="external">https://github.com/DrummerB/BFNavigationBarDrawer</a><br>24：比如筛选、模糊、优化、蒙版、调整大小、旋转以及保存等等。同时还提供了一个UIImageView子类从URL异步加载图片，并在下载完毕时展示图片。<br>地址：<a href="https://github.com/Nyx0uf/NYXImagesKit" target="_blank" rel="external">https://github.com/Nyx0uf/NYXImagesKit</a><br>25：底部TabBar<br>地址：<a href="https://github.com/robbdimitrov/RDVTabBarController" target="_blank" rel="external">https://github.com/robbdimitrov/RDVTabBarController</a><br>26:表情面版<br>地址：<a href="https://github.com/ayushgoel/AGEmojiKeyboard" target="_blank" rel="external">https://github.com/ayushgoel/AGEmojiKeyboard</a><br>27:记录框架<br>地址：<a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="external">https://github.com/CocoaLumberjack/CocoaLumberjack</a><br>28：IOS与javascript交互<br>地址：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">https://github.com/marcuswestin/WebViewJavascriptBridge</a><br>29：图表统计展示<br>地址：<a href="https://github.com/kevinzhow/PNChart" target="_blank" rel="external">https://github.com/kevinzhow/PNChart</a><br>30:appStore评分<br>地址：<a href="https://github.com/arashpayan/appirater" target="_blank" rel="external">https://github.com/arashpayan/appirater</a><br>31：iOS-Categories 扩展类大全<br>地址：<a href="https://github.com/shaojiankui/IOS-Categories" target="_blank" rel="external">https://github.com/shaojiankui/IOS-Categories</a><br>32：扫描二维码，仿微信效果，带有扫描条<br>地址：<a href="https://github.com/JxbSir/JxbScanQR" target="_blank" rel="external">https://github.com/JxbSir/JxbScanQR</a><br>33:动效弹出视图(弹出窗里面为文字，可以定义弹出的方向，及显示的时间)–AMPopTip<br>地址：<a href="https://github.com/andreamazz/AMPopTip" target="_blank" rel="external">https://github.com/andreamazz/AMPopTip</a><br>34:基于Masonry自动计算行高扩展<br>地址：<a href="https://github.com/632840804/HYBMasonryAutoCellHeight" target="_blank" rel="external">https://github.com/632840804/HYBMasonryAutoCellHeight</a><br>35:模仿新浪微博弹出菜单<br>地址：<a href="https://github.com/wwdc14/HyPopMenuView" target="_blank" rel="external">https://github.com/wwdc14/HyPopMenuView</a><br>36:搜索历史标签<br>地址：<a href="https://github.com/zhiwupei/SearchHistory" target="_blank" rel="external">https://github.com/zhiwupei/SearchHistory</a><br>37：快速集成新手引导的类库<br>地址：<a href="https://github.com/StrongX/XSportLight" target="_blank" rel="external">https://github.com/StrongX/XSportLight</a><br>38：设置页面的封装<br>地址：<a href="https://github.com/renzifeng/ZFSetting" target="_blank" rel="external">https://github.com/renzifeng/ZFSetting</a><br>39：带箭头的弹出视图插件<br>地址：<a href="https://github.com/xiekw2010/DXPopover" target="_blank" rel="external">https://github.com/xiekw2010/DXPopover</a><br>40：下拉菜单插件<br>地址：<a href="https://github.com/dopcn/DOPDropDownMenu/" target="_blank" rel="external">https://github.com/dopcn/DOPDropDownMenu/</a><br>41：表格空白提示插件<br>地址：<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="external">https://github.com/dzenbot/DZNEmptyDataSet</a><br>42:给任意UIView视图四条边框加上阴影，可以自定义阴影的颜色、粗细程度、透明程度以及位置（上下左右边框）<br>地址：<a href="https://github.com/Seitk/UIView-Shadow-Maker" target="_blank" rel="external">https://github.com/Seitk/UIView-Shadow-Maker</a><br>43:不错的日期时间插件<br>地址：<a href="https://github.com/CoderXL/UUDatePicker" target="_blank" rel="external">https://github.com/CoderXL/UUDatePicker</a><br>44:底部弹出选择<br>地址：<a href="https://github.com/skywinder/ActionSheetPicker-3.0" target="_blank" rel="external">https://github.com/skywinder/ActionSheetPicker-3.0</a><br>45:比较不错的引导页面插件<br>地址：<a href="https://github.com/ealeksandrov/EAIntroView" target="_blank" rel="external">https://github.com/ealeksandrov/EAIntroView</a><br>46:两个APP跳转的插件<br>地址：<a href="https://github.com/usebutton/DeepLinkKit" target="_blank" rel="external">https://github.com/usebutton/DeepLinkKit</a><br>47:本地存取NSUserDefaults插件<br>地址：<a href="https://github.com/gangverk/GVUserDefaults" target="_blank" rel="external">https://github.com/gangverk/GVUserDefaults</a><br>48:NSArray 和 NSDictionary关于LINQ的操作方式，封装一些常用的操作<br>地址：<a href="https://github.com/ColinEberhardt/LinqToObjectiveC" target="_blank" rel="external">https://github.com/ColinEberhardt/LinqToObjectiveC</a><br>49:可以监控网络请求的内容<br>地址：<a href="https://github.com/coderyi/NetworkEye" target="_blank" rel="external">https://github.com/coderyi/NetworkEye</a><br>50：时间帮助插件，可以快速获取时间，比较，增加等操作<br>地址：<a href="https://github.com/MatthewYork/DateTools" target="_blank" rel="external">https://github.com/MatthewYork/DateTools</a><br>51: 不错的链式动作<br>地址：<a href="https://github.com/jhurray/JHChainableAnimations" target="_blank" rel="external">https://github.com/jhurray/JHChainableAnimations</a><br>52:弹出层视图，背景效果（可以自定义视图的内容）<br>地址：<a href="https://github.com/HJaycee/JCAlertView" target="_blank" rel="external">https://github.com/HJaycee/JCAlertView</a><br>53:圆形进度条的显示，中间可显示值<br>地址：<a href="https://github.com/mdinacci/MDRadialProgress" target="_blank" rel="external">https://github.com/mdinacci/MDRadialProgress</a><br>54:很帅的数据加载动画（可以用于数据列表加载的展现）<br>地址：<a href="https://github.com/NghiaTranUIT/FeSpinner" target="_blank" rel="external">https://github.com/NghiaTranUIT/FeSpinner</a><br>55:一个开源的AFnetworking上层的封装（猿题库等运用）<br>地址：<a href="https://github.com/yuantiku/YTKNetwork" target="_blank" rel="external">https://github.com/yuantiku/YTKNetwork</a><br>56:CBStoreHouseRefreshControl：一个效果很酷炫的下拉刷新控件<br>地址：<a href="https://github.com/coolbeet/CBStoreHouseRefreshControl" target="_blank" rel="external">https://github.com/coolbeet/CBStoreHouseRefreshControl</a><br>57:AFNetworking-RACExtensions:针对ReactiveCocoa的AF封装<br>地址：<a href="https://github.com/CodaFi/AFNetworking-RACExtensions" target="_blank" rel="external">https://github.com/CodaFi/AFNetworking-RACExtensions</a><br>58:模糊效果（毛玻璃）<br>地址：<a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="external">https://github.com/nicklockwood/FXBlurView</a><br>二：源代码实例<br>1:Coding.net客户端<br>地址：<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">https://coding.net/u/coding/p/Coding-iOS/git</a><br>2:高仿美团iOS版<br>地址：<a href="https://github.com/lookingstars/meituan" target="_blank" rel="external">https://github.com/lookingstars/meituan</a><br>3:模仿网易新闻做的精仿网易新闻<br>地址：<a href="https://github.com/dsxNiubility/SXNews" target="_blank" rel="external">https://github.com/dsxNiubility/SXNews</a><br>4:支付宝高仿版<br>地址：<a href="https://github.com/gsdios/GSD_ZHIFUBAO" target="_blank" rel="external">https://github.com/gsdios/GSD_ZHIFUBAO</a><br>5:高仿百度传课iOS版<br>地址：<a href="https://github.com/lookingstars/chuanke" target="_blank" rel="external">https://github.com/lookingstars/chuanke</a><br>6：模仿一元云购<br>地址：<a href="https://github.com/JxbSir/YiYuanYunGou" target="_blank" rel="external">https://github.com/JxbSir/YiYuanYunGou</a><br>7：wordpress源代码<br>地址：<a href="https://github.com/wordpress-mobile/WordPress-iOS" target="_blank" rel="external">https://github.com/wordpress-mobile/WordPress-iOS</a><br>8：v2ex源代码（文章类型，若报SVProgressHUD错，则把Podfile中的SVProgressHUD移除）<br>地址：<a href="https://github.com/singro/v2ex" target="_blank" rel="external">https://github.com/singro/v2ex</a><br>9:PHPHub客户端(IOS8.0以上)<br>地址：<a href="https://github.com/Aufree/phphub-ios" target="_blank" rel="external">https://github.com/Aufree/phphub-ios</a><br>10:快速搭建项目源代码<br>地址：<a href="https://github.com/wujunyang/MobileProject" target="_blank" rel="external">https://github.com/wujunyang/MobileProject</a><br>三：辅助软件<br>1：XCODE文档注解插件VVDocumenter<br>地址：<a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">https://github.com/onevcat/VVDocumenter-Xcode</a><br>2：将JSON格式化输出为模型的属性<br>地址：<a href="https://github.com/EnjoySR/ESJsonFormat-Xcode" target="_blank" rel="external">https://github.com/EnjoySR/ESJsonFormat-Xcode</a><br>3：图片提示插件<br>地址：<a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="external">https://github.com/ksuther/KSImageNamed-Xcode</a><br>4：图片转换插件<br>地址：<a href="https://github.com/rickytan/RTImageAssets" target="_blank" rel="external">https://github.com/rickytan/RTImageAssets</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一：第三方插件&lt;br&gt;1:基于响应式编程思想的oc&lt;br&gt;地址：&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="第三方资源" scheme="http://www.jeyblogs.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Object-C——iOS开发编码规范</title>
    <link href="http://www.jeyblogs.com/2013/10/18/Object-C%E2%80%94%E2%80%94iOS%E5%BC%80%E5%8F%91%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://www.jeyblogs.com/2013/10/18/Object-C——iOS开发编码规范/</id>
    <published>2013-10-18T03:41:32.000Z</published>
    <updated>2016-08-17T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>任意函数长度不得超过50行。</p>
</li>
<li><p>每一行行代码不能超过80个字符。设置提醒：可以在Xcode中设置超过80个字符的提醒，Preferences—Text Editing—Page guide at column勾上.设置完之后就会在代码80个字符处有一条竖线。</p>
</li>
<li><p>方法的“+”，“-”与括号之间留空格</p>
</li>
<li><p>在方法和方法之间留空一行。</p>
</li>
<li><p>功能相近的方法要放在一起，并推荐使用#pragma mark - <strong> </strong>来标注，在代码导航栏可以快速查找</p>
</li>
<li><p>二元运算符和参数之间要有一个空格，如赋值号 = 左右各留一个空格。<br>self.myString = @”235423rew523452345”;</p>
</li>
<li><p>一元运算符和参数之间不放置空格，比如！非运算符，&amp;按位与，|按位或。<br>BOOL isOpen = true;<br>BOOL isClose = !isOpen;</p>
</li>
<li><p>强制类型转换和参数之间不放置空格。<br>NSString <em>str3 = (NSString</em>)self.myString;</p>
</li>
<li><p>长的变量值应该拆分为多行。尤其体现在使用数组或者字典。以下也分别是快速声明数组@[]和字典@{}的方法。<br>NSArray *array = @[@”111”,</p>
<pre><code>@&quot;2222222222&quot;,
@&quot;3333333&quot;,
@&quot;wwwwwwwwwwww&quot;
];
</code></pre><p>NSDictionary *dict = @{@”name”:@”jack”,</p>
<pre><code>@&quot;age&quot;:@&quot;20&quot;,
@&quot;gender&quot;:@&quot;female&quot;,
@&quot;isMarried&quot;:@&quot;false&quot;
};
</code></pre></li>
<li><p>使用有意义的名字命名，拒绝使用i,j等无意义字符命名。类的命名首字母大写，其他变量的命名首字符小写，并使用驼峰式分割单词。</p>
</li>
<li><p>尽量减少在代码中直接使用数字常量，而使用宏定义等方式。如：MAX_NUMBER_PHONE替代8等等。</p>
</li>
<li><p>尽量减少代码中的重复计算，比如代码中多处要使用屏幕宽度，然后计算：[[UIScreenmainScreen] bounds].size.width ,很多次，闲得很繁琐，代码也冗长。不如直接宏定义：<br>#define SCREEN_WIDTH ([[UIScreen mainScreen] bounds].size.width)<br>宏定义全部字母大写</p>
</li>
<li><p>合理使用约定俗成的缩略词：</p>
<pre><code>alloc:分配；
alt：轮流，交替；
app:应用程序；
calc：计算；
dealloc：销毁、析构；
func：函数、方法；
horiz：水平的；
info：信息；
init：初始化；
max：最大的；
min：最小的；
msg：消息；
nib：Interface Builder；
rect：矩形；
temp：暂时的；
vert：垂直的；
</code></pre></li>
<li><p>合理范围内使用链式编程:<br>NSString *myName = [[NSString alloc] init];<br>但是嵌套不宜超过3层，超过3层需进行重构。</p>
</li>
<li><p>函数调用时所有参数在同一行。如果参数过多，则可以每行一个参数，每个参数以冒号对齐。</p>
</li>
<li><p>对传入参数的保护或者说是否为空的判断，尽量不要使用if(!obj),而使用NSAssert断言来处理。NSAssert是系统定义的宏。<br>NSAssert(myName != nil, @”myName参数为空”);</p>
<pre><code>如果条件判断为真，则程序继续执行；
如果判断条件为假，则抛出异常，异常内容为后面定义的字符串；
</code></pre></li>
<li><p>if-else超过四层的时候，就要考虑重构，多层的if-else结构很难维护。</p>
</li>
<li><p>当需要一定条件才执行某项操作时，最左边的应该是最重要的代码，不要将最重要的代码内嵌到if中。<br>如良好的风格是：</p>
</li>
</ol>
<ul>
<li>(void) someMethod {if(![someOther boolValue]) {   return;<br>}//最重要的代码写在这里；}<br>  反面教材:</li>
<li>(void) someMethod {if([someOther boolValue]) {<br>  //重要代码；<br>}<br>}</li>
</ul>
<ol>
<li><p>所有的逻辑块都使用{}花括号包围，就算只是一行代码。</p>
</li>
<li><p>明确指定构造函数，并且加上注释的注释，加上注释，加上注释！</p>
</li>
<li><p>UIView的子类初始化的时候，不要进行任何的布局操作。布局操作应该在layoutSubviews里面做；需要重新布局的时候调用setNeedsLayout，而不要直接调用layoutSubviews。</p>
</li>
<li><p>保持公共API简单，也就是保持.h文件简单。放在.h中声明的函数都是会被公开的，如果根本就没必要对其他类公开，再不要在.h中声明。OC中的方法都是公有方法，没有私有方法一说。</p>
</li>
<li><p>一个文件只实现一个类。同一个文件中不要有多个类。</p>
</li>
<li><p>Protocol单独用一个文件来创建，尽量不要与相关类混在一个文件中。</p>
</li>
<li><p>布局时尽量使用相对布局，比如使用子View在父View中的相对位置。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;任意函数长度不得超过50行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一行行代码不能超过80个字符。设置提醒：可以在Xcode中设置超过80个字符的提醒，Preferences—Text Editing—Page guide at column勾上.设置完之后
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="iOS编码规范" scheme="http://www.jeyblogs.com/tags/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title> iOS常用宏定义</title>
    <link href="http://www.jeyblogs.com/2013/09/30/iOS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://www.jeyblogs.com/2013/09/30/iOS常用宏定义/</id>
    <published>2013-09-30T06:54:44.000Z</published>
    <updated>2016-08-17T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS常用宏定义"><a href="#iOS常用宏定义" class="headerlink" title="iOS常用宏定义"></a>iOS常用宏定义</h3><p>#ifndef MacroDefinition_h</p>
<p>#define MacroDefinition_h</p>
<p>//——————-获取设备大小————————-<br>//NavBar高度</p>
<p>#define NavigationBar_HEIGHT 44</p>
<p>//获取屏幕 宽度、高度</p>
<p>#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)</p>
<p>#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)</p>
<p>// MainScreen bounds</p>
<p>#define Main_Screen_Bounds [[UIScreen mainScreen] bounds]<br>//——————-获取设备大小————————-</p>
<p>//——————-打印日志————————-<br>//DEBUG 模式下打印日志,当前行</p>
<p>#ifdef DEBUG</p>
<h1 id="define-DLog-fmt-…-NSLog-”-s-Line-d-“-fmt-PRETTY-FUNCTION-LINE-VA-ARGS"><a href="#define-DLog-fmt-…-NSLog-”-s-Line-d-“-fmt-PRETTY-FUNCTION-LINE-VA-ARGS" class="headerlink" title="define DLog(fmt, …) NSLog((@”%s [Line %d] “ fmt), PRETTY_FUNCTION, LINE, ##VA_ARGS);"></a>define DLog(fmt, …) NSLog((@”%s [Line %d] “ fmt), <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>, ##<strong>VA_ARGS</strong>);</h1><p>#else</p>
<h1 id="define-DLog-…"><a href="#define-DLog-…" class="headerlink" title="define DLog(…)"></a>define DLog(…)</h1><p>#endif</p>
<p>//重写NSLog,Debug模式下打印日志和当前行数</p>
<p>#if DEBUG</p>
<p>#define NSLog(FORMAT, …) fprintf(stderr,”\nfunction:%s line:%d content:%s\n”, <strong>FUNCTION</strong>, <strong>LINE</strong>, ［NSString stringWithFormat:FORMAT, ##<strong>VA_ARGS</strong>] UTF8String]);</p>
<p>#else</p>
<p>#define NSLog(FORMAT, …) nil</p>
<p>#endif</p>
<p>//DEBUG 模式下打印日志,当前行 并弹出一个警告</p>
<p>#ifdef DEBUG</p>
<h1 id="define-ULog-fmt-…-UIAlertView-alert-［UIAlertView-alloc-initWithTitle-NSString-stringWithFormat-”-s-n-Line-d-“-PRETTY-FUNCTION-LINE-message-NSString-stringWithFormat-fmt-VA-ARGS-delegate-nil-cancelButtonTitle-”Ok”-otherButtonTitles-nil-alert-show"><a href="#define-ULog-fmt-…-UIAlertView-alert-［UIAlertView-alloc-initWithTitle-NSString-stringWithFormat-”-s-n-Line-d-“-PRETTY-FUNCTION-LINE-message-NSString-stringWithFormat-fmt-VA-ARGS-delegate-nil-cancelButtonTitle-”Ok”-otherButtonTitles-nil-alert-show" class="headerlink" title="define ULog(fmt, …) { UIAlertView *alert = ［UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@”%s\n [Line %d] “, PRETTY_FUNCTION, LINE] message:[NSString stringWithFormat:fmt, ##VA_ARGS] delegate:nil cancelButtonTitle:@”Ok” otherButtonTitles:nil]; [alert show]; }"></a>define ULog(fmt, …) { UIAlertView *alert = ［UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@”%s\n [Line %d] “, <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>] message:[NSString stringWithFormat:fmt, ##<strong>VA_ARGS</strong>] delegate:nil cancelButtonTitle:@”Ok” otherButtonTitles:nil]; [alert show]; }</h1><p>#else</p>
<h1 id="define-ULog-…"><a href="#define-ULog-…" class="headerlink" title="define ULog(…)"></a>define ULog(…)</h1><p>#endif</p>
<p>//打印Frame</p>
<p>#define LogFrame(frame) NSLog(@”frame[X=%.1f,Y=%.1f,W=%.1f,H=%.1f”,frame.origin.x,frame.origin.y,frame.size.width,frame.size.height)<br>//打印Point</p>
<p>#define LogPoint(point) NSLog(@”Point[X=%.1f,Y=%.1f]”,point.x,point.y)</p>
<p>//———————————————–<br>// 字体大小(常规/粗体)</p>
<p>#define BOLDSYSTEMFONT(FONTSIZE)[UIFont boldSystemFontOfSize:FONTSIZE]</p>
<p>#define SYSTEMFONT(FONTSIZE)    [UIFont systemFontOfSize:FONTSIZE]</p>
<p>#define FONT(NAME, FONTSIZE)    [UIFont fontWithName:(NAME) size:(FONTSIZE)]</p>
<p>//———————-系统—————————-</p>
<p>// 是否iPad</p>
<p>#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)<br>// 是否iPad</p>
<p>#define someThing (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)? ipad: iphone</p>
<p>//获取系统版本</p>
<p>#define IOS_VERSION ［[UIDevice currentDevice] systemVersion] floatValue]</p>
<p>#define CurrentSystemVersion ［UIDevice currentDevice] systemVersion]</p>
<p>//App版本号</p>
<p>#define appMPVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@”CFBundleShortVersionString”]</p>
<p>//获取当前语言</p>
<p>#define CurrentLanguage (［NSLocale preferredLanguages] objectAtIndex:0])</p>
<p>//判断是否 Retina屏、设备是否%fhone 5、是否是iPad</p>
<p>#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), ［UIScreen mainScreen] currentMode].size) : NO)</p>
<p>#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), ［UIScreen mainScreen] currentMode].size) : NO)</p>
<p>#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</p>
<p>//判断设备的操做系统是不是ios7</p>
<p>#define IOS7 (［[UIDevice currentDevice].systemVersion doubleValue] &gt;= 7.0]</p>
<p>//判断当前设备是不是iphone5</p>
<p>#define kScreenIphone5 ((［UIScreen mainScreen] bounds].size.height)&gt;=568)</p>
<p>//获取当前屏幕的高度</p>
<p>#define kMainScreenHeight ([UIScreen mainScreen].applicationFrame.size.height)</p>
<p>//获取当前屏幕的宽度</p>
<p>#define kMainScreenWidth ([UIScreen mainScreen].applicationFrame.size.width)</p>
<p>//定义一个define函数</p>
<p>#define TT_RELEASE_CF_SAFELY(<strong>REF) { if (nil != (</strong>REF)) { CFRelease(<strong>REF); </strong>REF = nil; } }</p>
<p>//判断是真机还是模拟器</p>
<p>#if TARGET_OS_IPHONE<br>//iPhone Device</p>
<p>#endif</p>
<p>#if TARGET_IPHONE_SIMULATOR<br>//iPhone Simulator</p>
<p>#endif</p>
<p>//检查系统版本</p>
<p>#define SYSTEM_VERSION_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</p>
<p>#define SYSTEM_VERSION_GREATER_THAN(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</p>
<p>#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</p>
<p>#define SYSTEM_VERSION_LESS_THAN(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</p>
<p>#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</p>
<p>//———————-系统—————————-</p>
<p>#define TICK   NSDate *startTime = [NSDate date]     //写在方法头尾，测试运行时间</p>
<p>#define TOCK   NSLog(@”Time: %f”, -[startTime timeIntervalSinceNow])</p>
<p>#define TimeGetCurrent  CFAbsoluteTimeGetCurrent()  // 写在要测试代码片段头尾，两个相减算运行时间</p>
<p>#define AC_Assert(condition) NSAssert(condition, ([NSString stringWithFormat:@”file name = %s —&gt; function name = %s at line: %d”, <strong>FILE</strong>, <strong>FUNCTION</strong>, <strong>LINE</strong>]));</p>
<p>//————————————————————</p>
<p>#define CHECK_AlphaNum   @”ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789”</p>
<p>#define CHECK_Num   @”0123456789”</p>
<p>//———————-内存—————————-</p>
<p>//使用ARC和不使用ARC</p>
<p>#if __has_feature(objc_arc)<br>//compiling with ARC</p>
<p>#else<br>// compiling without ARC</p>
<p>#endif</p>
<p>#pragma mark - common functions</p>
<p>#define RELEASE_SAFELY(<strong>POINTER) { [</strong>POINTER release]; __POINTER = nil; }</p>
<p>//释放一个对象</p>
<p>#define SAFE_DELETE(P) if(P) { [P release], P = nil; }</p>
<p>#define SAFE_RELEASE(x) [x release];x=nil</p>
<p>// 是否空对象</p>
<p>#define IS_NULL_CLASS(OBJECT) [OBJECT isKindOfClass:[NSNull class]]</p>
<p>//———————-内存—————————-</p>
<p>//———————-图片—————————-</p>
<p>//读取本地图片</p>
<p>#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:［NSBundle mainBundle]pathForResource:file ofType:ext］</p>
<p>//定义UIImage对象</p>
<p>#define IMAGE(A) [UIImage imageWithContentsOfFile:［NSBundle mainBundle] pathForResource:A ofType:nil］</p>
<p>//定义UIImage对象</p>
<p>#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer］</p>
<p>//可拉伸的图片</p>
<p>#define ResizableImage(name,top,left,bottom,right) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right)]</p>
<p>#define ResizableImageWithMode(name,top,left,bottom,right,mode) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right) resizingMode:mode]<br>//建议使用前两种宏定义,性能高于后者<br>//———————-图片—————————-</p>
<p>//———————-颜色类—————————<br>// rgb颜色转换（16进制-&gt;10进制）</p>
<p>#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</p>
<p>//带有RGBA的颜色设置</p>
<p>#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]</p>
<p>// 获取RGB颜色</p>
<p>#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</p>
<p>#define RGB(r,g,b) RGBA(r,g,b,1.0f)</p>
<p>//背景色</p>
<p>#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]</p>
<p>//清除背景色</p>
<p>#define CLEARCOLOR [UIColor clearColor]</p>
<p>#pragma mark - color functions</p>
<p>#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</p>
<p>#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</p>
<p>//———————-颜色类————————–</p>
<p>//———————-其他—————————-</p>
<p>//方正黑体简体字体定义</p>
<p>#define FONT(F) [UIFont fontWithName:@”FZHTJW–GB1-0” size:F]</p>
<p>//定义一个API</p>
<p>#define APIURL @”<a href="http://xxxxx/" target="_blank" rel="external">http://xxxxx/</a>“<br>//登录API</p>
<p>#define APILogin [APIURL stringByAppendingString:@”Login”]</p>
<p>//设置View的tag属性</p>
<p>#define VIEWWITHTAG(_OBJECT, _TAG) [_OBJECT viewWithTag : _TAG]<br>//程序的本地化,引用国际化的文件</p>
<p>#define MyLocal(x, …) NSLocalizedString(x, nil)</p>
<p>//G－C－D</p>
<p>#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</p>
<p>#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</p>
<p>//NSUserDefaults 实例化</p>
<p>#define USER_DEFAULT [NSUserDefaults standardUserDefaults]</p>
<p>//由角度获取弧度 有弧度获取角度</p>
<p>#define degreesToRadian(x) (M_PI * (x) / 180.0)</p>
<p>#define radianToDegrees(radian) (radian*180.0)/(M_PI)</p>
<p>//单例化一个类</p>
<p>#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \<br>\<br>static classname *shared##classname = nil; \<br>\</p>
<ul>
<li>(classname *)shared##classname \<br>{ \<br>@synchronized(self) \<br>{ \<br>if (shared##classname == nil) \<br>{ \<br>shared##classname = ［self alloc] init]; \<br>} \<br>} \<br>\<br>return shared##classname; \<br>} \<br>\</li>
<li>(id)allocWithZone:(NSZone *)zone \<br>{ \<br>@synchronized(self) \<br>{ \<br>if (shared##classname == nil) \<br>{ \<br>shared##classname = [super allocWithZone:zone]; \<br>return shared##classname; \<br>} \<br>} \<br>\<br>return nil; \<br>} \<br>\</li>
</ul>
<ul>
<li>(id)copyWithZone:(NSZone *)zone \<br>{ \<br>return self; \<br>}</li>
</ul>
<p>#endif</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iOS常用宏定义&quot;&gt;&lt;a href=&quot;#iOS常用宏定义&quot; class=&quot;headerlink&quot; title=&quot;iOS常用宏定义&quot;&gt;&lt;/a&gt;iOS常用宏定义&lt;/h3&gt;&lt;p&gt;#ifndef MacroDefinition_h&lt;/p&gt;
&lt;p&gt;#define Macro
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="iOS" scheme="http://www.jeyblogs.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode常用快捷键，网上找的总结一下，特别是格式化代码</title>
    <link href="http://www.jeyblogs.com/2013/08/12/Xcode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%8C%E7%BD%91%E4%B8%8A%E6%89%BE%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%89%B9%E5%88%AB%E6%98%AF%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.jeyblogs.com/2013/08/12/Xcode常用快捷键，网上找的总结一下，特别是格式化代码/</id>
    <published>2013-08-12T08:06:36.000Z</published>
    <updated>2016-08-17T09:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>隐藏xcode command+h<br>退出xcode command+q<br>关闭窗口 command+w<br>关闭所有窗口 command+option+w<br>关闭当前项目 command+control+w<br>关闭当前文件 command+shift+w<br>保存文件 command+s<br>保存所有文件 command+option+s<br>还原到保存时状态 command+u<br>项目中查找 command+shift+F<br>查找下一个 command+g<br>查找上一个 command+shift+g<br>浏览源文件 command+Double Click<br>打开头文件 command+shift+d<br>切换头/源文件 command+option+上箭头</p>
<p>撤销 command+z<br>重复 command+shift+z<br>剪切 command+x<br>复制 command+c<br>粘贴 command+v<br>粘贴并匹配格式 command+option+shift+v<br>全选 command+a<br>注释 command+/<br>文件首行 command+上箭头<br>文件末 command+下箭头<br>行首 command+左箭头<br>行末 command+右箭头<br>上一单词 option+左箭头<br>下一单词 option+右箭头<br>上一拆分单词 control+左箭头<br>下一拆分单词 control+右箭头<br>Tab ：接受代码提示<br>Esc ：显示代码提示菜单<br>下个Build警告或错误 command+=<br>前个Build警告或错误 command+shift+=<br>以调试方式运行程序 command+y<br>继续（在调试中）command+option+p<br>编译运行 command+r</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隐藏xcode command+h&lt;br&gt;退出xcode command+q&lt;br&gt;关闭窗口 command+w&lt;br&gt;关闭所有窗口 command+option+w&lt;br&gt;关闭当前项目 command+control+w&lt;br&gt;关闭当前文件 command+shift+w
    
    </summary>
    
      <category term="xcode" scheme="http://www.jeyblogs.com/categories/xcode/"/>
    
    
      <category term="xcode" scheme="http://www.jeyblogs.com/tags/xcode/"/>
    
  </entry>
  
</feed>
