<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jey</title>
  <subtitle>Keep Calm and Carry On</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jeyblogs.com/"/>
  <updated>2016-08-15T07:31:31.000Z</updated>
  <id>http://www.jeyblogs.com/</id>
  
  <author>
    <name>Jey.yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> iOS常用宏定义</title>
    <link href="http://www.jeyblogs.com/2014/03/06/iOS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://www.jeyblogs.com/2014/03/06/iOS常用宏定义/</id>
    <published>2014-03-06T06:54:44.000Z</published>
    <updated>2016-08-15T07:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS常用宏定义"><a href="#iOS常用宏定义" class="headerlink" title="iOS常用宏定义"></a>iOS常用宏定义</h3><p>#ifndef MacroDefinition_h</p>
<p>#define MacroDefinition_h</p>
<p>//——————-获取设备大小————————-<br>//NavBar高度</p>
<p>#define NavigationBar_HEIGHT 44</p>
<p>//获取屏幕 宽度、高度</p>
<p>#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)</p>
<p>#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)</p>
<p>// MainScreen bounds</p>
<p>#define Main_Screen_Bounds [[UIScreen mainScreen] bounds]<br>//——————-获取设备大小————————-</p>
<p>//——————-打印日志————————-<br>//DEBUG 模式下打印日志,当前行</p>
<p>#ifdef DEBUG</p>
<h1 id="define-DLog-fmt-…-NSLog-”-s-Line-d-“-fmt-PRETTY-FUNCTION-LINE-VA-ARGS"><a href="#define-DLog-fmt-…-NSLog-”-s-Line-d-“-fmt-PRETTY-FUNCTION-LINE-VA-ARGS" class="headerlink" title="define DLog(fmt, …) NSLog((@”%s [Line %d] “ fmt), PRETTY_FUNCTION, LINE, ##VA_ARGS);"></a>define DLog(fmt, …) NSLog((@”%s [Line %d] “ fmt), <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>, ##<strong>VA_ARGS</strong>);</h1><p>#else</p>
<h1 id="define-DLog-…"><a href="#define-DLog-…" class="headerlink" title="define DLog(…)"></a>define DLog(…)</h1><p>#endif</p>
<p>//重写NSLog,Debug模式下打印日志和当前行数</p>
<p>#if DEBUG</p>
<p>#define NSLog(FORMAT, …) fprintf(stderr,”\nfunction:%s line:%d content:%s\n”, <strong>FUNCTION</strong>, <strong>LINE</strong>, ［NSString stringWithFormat:FORMAT, ##<strong>VA_ARGS</strong>] UTF8String]);</p>
<p>#else</p>
<p>#define NSLog(FORMAT, …) nil</p>
<p>#endif</p>
<p>//DEBUG 模式下打印日志,当前行 并弹出一个警告</p>
<p>#ifdef DEBUG</p>
<h1 id="define-ULog-fmt-…-UIAlertView-alert-［UIAlertView-alloc-initWithTitle-NSString-stringWithFormat-”-s-n-Line-d-“-PRETTY-FUNCTION-LINE-message-NSString-stringWithFormat-fmt-VA-ARGS-delegate-nil-cancelButtonTitle-”Ok”-otherButtonTitles-nil-alert-show"><a href="#define-ULog-fmt-…-UIAlertView-alert-［UIAlertView-alloc-initWithTitle-NSString-stringWithFormat-”-s-n-Line-d-“-PRETTY-FUNCTION-LINE-message-NSString-stringWithFormat-fmt-VA-ARGS-delegate-nil-cancelButtonTitle-”Ok”-otherButtonTitles-nil-alert-show" class="headerlink" title="define ULog(fmt, …) { UIAlertView *alert = ［UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@”%s\n [Line %d] “, PRETTY_FUNCTION, LINE] message:[NSString stringWithFormat:fmt, ##VA_ARGS] delegate:nil cancelButtonTitle:@”Ok” otherButtonTitles:nil]; [alert show]; }"></a>define ULog(fmt, …) { UIAlertView *alert = ［UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@”%s\n [Line %d] “, <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>] message:[NSString stringWithFormat:fmt, ##<strong>VA_ARGS</strong>] delegate:nil cancelButtonTitle:@”Ok” otherButtonTitles:nil]; [alert show]; }</h1><p>#else</p>
<h1 id="define-ULog-…"><a href="#define-ULog-…" class="headerlink" title="define ULog(…)"></a>define ULog(…)</h1><p>#endif</p>
<p>//打印Frame</p>
<p>#define LogFrame(frame) NSLog(@”frame[X=%.1f,Y=%.1f,W=%.1f,H=%.1f”,frame.origin.x,frame.origin.y,frame.size.width,frame.size.height)<br>//打印Point</p>
<p>#define LogPoint(point) NSLog(@”Point[X=%.1f,Y=%.1f]”,point.x,point.y)</p>
<p>//———————————————–<br>// 字体大小(常规/粗体)</p>
<p>#define BOLDSYSTEMFONT(FONTSIZE)[UIFont boldSystemFontOfSize:FONTSIZE]</p>
<p>#define SYSTEMFONT(FONTSIZE)    [UIFont systemFontOfSize:FONTSIZE]</p>
<p>#define FONT(NAME, FONTSIZE)    [UIFont fontWithName:(NAME) size:(FONTSIZE)]</p>
<p>//———————-系统—————————-</p>
<p>// 是否iPad</p>
<p>#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)<br>// 是否iPad</p>
<p>#define someThing (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)? ipad: iphone</p>
<p>//获取系统版本</p>
<p>#define IOS_VERSION ［[UIDevice currentDevice] systemVersion] floatValue]</p>
<p>#define CurrentSystemVersion ［UIDevice currentDevice] systemVersion]</p>
<p>//App版本号</p>
<p>#define appMPVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@”CFBundleShortVersionString”]</p>
<p>//获取当前语言</p>
<p>#define CurrentLanguage (［NSLocale preferredLanguages] objectAtIndex:0])</p>
<p>//判断是否 Retina屏、设备是否%fhone 5、是否是iPad</p>
<p>#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), ［UIScreen mainScreen] currentMode].size) : NO)</p>
<p>#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), ［UIScreen mainScreen] currentMode].size) : NO)</p>
<p>#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</p>
<p>//判断设备的操做系统是不是ios7</p>
<p>#define IOS7 (［[UIDevice currentDevice].systemVersion doubleValue] &gt;= 7.0]</p>
<p>//判断当前设备是不是iphone5</p>
<p>#define kScreenIphone5 ((［UIScreen mainScreen] bounds].size.height)&gt;=568)</p>
<p>//获取当前屏幕的高度</p>
<p>#define kMainScreenHeight ([UIScreen mainScreen].applicationFrame.size.height)</p>
<p>//获取当前屏幕的宽度</p>
<p>#define kMainScreenWidth ([UIScreen mainScreen].applicationFrame.size.width)</p>
<p>//定义一个define函数</p>
<p>#define TT_RELEASE_CF_SAFELY(<strong>REF) { if (nil != (</strong>REF)) { CFRelease(<strong>REF); </strong>REF = nil; } }</p>
<p>//判断是真机还是模拟器</p>
<p>#if TARGET_OS_IPHONE<br>//iPhone Device</p>
<p>#endif</p>
<p>#if TARGET_IPHONE_SIMULATOR<br>//iPhone Simulator</p>
<p>#endif</p>
<p>//检查系统版本</p>
<p>#define SYSTEM_VERSION_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</p>
<p>#define SYSTEM_VERSION_GREATER_THAN(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</p>
<p>#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</p>
<p>#define SYSTEM_VERSION_LESS_THAN(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</p>
<p>#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v) (［[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</p>
<p>//———————-系统—————————-</p>
<p>#define TICK   NSDate *startTime = [NSDate date]     //写在方法头尾，测试运行时间</p>
<p>#define TOCK   NSLog(@”Time: %f”, -[startTime timeIntervalSinceNow])</p>
<p>#define TimeGetCurrent  CFAbsoluteTimeGetCurrent()  // 写在要测试代码片段头尾，两个相减算运行时间</p>
<p>#define AC_Assert(condition) NSAssert(condition, ([NSString stringWithFormat:@”file name = %s —&gt; function name = %s at line: %d”, <strong>FILE</strong>, <strong>FUNCTION</strong>, <strong>LINE</strong>]));</p>
<p>//————————————————————</p>
<p>#define CHECK_AlphaNum   @”ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789”</p>
<p>#define CHECK_Num   @”0123456789”</p>
<p>//———————-内存—————————-</p>
<p>//使用ARC和不使用ARC</p>
<p>#if __has_feature(objc_arc)<br>//compiling with ARC</p>
<p>#else<br>// compiling without ARC</p>
<p>#endif</p>
<p>#pragma mark - common functions</p>
<p>#define RELEASE_SAFELY(<strong>POINTER) { [</strong>POINTER release]; __POINTER = nil; }</p>
<p>//释放一个对象</p>
<p>#define SAFE_DELETE(P) if(P) { [P release], P = nil; }</p>
<p>#define SAFE_RELEASE(x) [x release];x=nil</p>
<p>// 是否空对象</p>
<p>#define IS_NULL_CLASS(OBJECT) [OBJECT isKindOfClass:[NSNull class]]</p>
<p>//———————-内存—————————-</p>
<p>//———————-图片—————————-</p>
<p>//读取本地图片</p>
<p>#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:［NSBundle mainBundle]pathForResource:file ofType:ext］</p>
<p>//定义UIImage对象</p>
<p>#define IMAGE(A) [UIImage imageWithContentsOfFile:［NSBundle mainBundle] pathForResource:A ofType:nil］</p>
<p>//定义UIImage对象</p>
<p>#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer］</p>
<p>//可拉伸的图片</p>
<p>#define ResizableImage(name,top,left,bottom,right) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right)]</p>
<p>#define ResizableImageWithMode(name,top,left,bottom,right,mode) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right) resizingMode:mode]<br>//建议使用前两种宏定义,性能高于后者<br>//———————-图片—————————-</p>
<p>//———————-颜色类—————————<br>// rgb颜色转换（16进制-&gt;10进制）</p>
<p>#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</p>
<p>//带有RGBA的颜色设置</p>
<p>#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]</p>
<p>// 获取RGB颜色</p>
<p>#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</p>
<p>#define RGB(r,g,b) RGBA(r,g,b,1.0f)</p>
<p>//背景色</p>
<p>#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]</p>
<p>//清除背景色</p>
<p>#define CLEARCOLOR [UIColor clearColor]</p>
<p>#pragma mark - color functions</p>
<p>#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</p>
<p>#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</p>
<p>//———————-颜色类————————–</p>
<p>//———————-其他—————————-</p>
<p>//方正黑体简体字体定义</p>
<p>#define FONT(F) [UIFont fontWithName:@”FZHTJW–GB1-0” size:F]</p>
<p>//定义一个API</p>
<p>#define APIURL @”<a href="http://xxxxx/" target="_blank" rel="external">http://xxxxx/</a>“<br>//登录API</p>
<p>#define APILogin [APIURL stringByAppendingString:@”Login”]</p>
<p>//设置View的tag属性</p>
<p>#define VIEWWITHTAG(_OBJECT, _TAG) [_OBJECT viewWithTag : _TAG]<br>//程序的本地化,引用国际化的文件</p>
<p>#define MyLocal(x, …) NSLocalizedString(x, nil)</p>
<p>//G－C－D</p>
<p>#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</p>
<p>#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</p>
<p>//NSUserDefaults 实例化</p>
<p>#define USER_DEFAULT [NSUserDefaults standardUserDefaults]</p>
<p>//由角度获取弧度 有弧度获取角度</p>
<p>#define degreesToRadian(x) (M_PI * (x) / 180.0)</p>
<p>#define radianToDegrees(radian) (radian*180.0)/(M_PI)</p>
<p>//单例化一个类</p>
<p>#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \<br>\<br>static classname *shared##classname = nil; \<br>\</p>
<ul>
<li>(classname *)shared##classname \<br>{ \<br>@synchronized(self) \<br>{ \<br>if (shared##classname == nil) \<br>{ \<br>shared##classname = ［self alloc] init]; \<br>} \<br>} \<br>\<br>return shared##classname; \<br>} \<br>\</li>
<li>(id)allocWithZone:(NSZone *)zone \<br>{ \<br>@synchronized(self) \<br>{ \<br>if (shared##classname == nil) \<br>{ \<br>shared##classname = [super allocWithZone:zone]; \<br>return shared##classname; \<br>} \<br>} \<br>\<br>return nil; \<br>} \<br>\</li>
</ul>
<ul>
<li>(id)copyWithZone:(NSZone *)zone \<br>{ \<br>return self; \<br>}</li>
</ul>
<p>#endif</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iOS常用宏定义&quot;&gt;&lt;a href=&quot;#iOS常用宏定义&quot; class=&quot;headerlink&quot; title=&quot;iOS常用宏定义&quot;&gt;&lt;/a&gt;iOS常用宏定义&lt;/h3&gt;&lt;p&gt;#ifndef MacroDefinition_h&lt;/p&gt;
&lt;p&gt;#define Macro
    
    </summary>
    
      <category term="Developer" scheme="http://www.jeyblogs.com/categories/Developer/"/>
    
    
      <category term="iOS" scheme="http://www.jeyblogs.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>超全面！常用的 iOS 第三方资源</title>
    <link href="http://www.jeyblogs.com/2013/09/11/%E8%B6%85%E5%85%A8%E9%9D%A2%EF%BC%81%E5%B8%B8%E7%94%A8%E7%9A%84%20iOS%20%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/"/>
    <id>http://www.jeyblogs.com/2013/09/11/超全面！常用的 iOS 第三方资源/</id>
    <published>2013-09-11T02:29:49.000Z</published>
    <updated>2016-08-15T07:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>一：第三方插件<br>1:基于响应式编程思想的oc<br>地址：<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">https://github.com/ReactiveCocoa/ReactiveCocoa</a><br>2：hud提示框<br>地址：<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">https://github.com/jdg/MBProgressHUD</a><br>3：XML/HTML解析<br>地址：<a href="https://github.com/topfunky/hpple" target="_blank" rel="external">https://github.com/topfunky/hpple</a><br>4：有文字输入时，能根据键盘是否弹出来调整自身显示内容的位置<br>地址：<a href="https://github.com/michaeltyson/TPKeyboardAvoiding" target="_blank" rel="external">https://github.com/michaeltyson/TPKeyboardAvoiding</a><br>5：状态栏提示框<br>地址：<a href="https://github.com/jaydee3/JDStatusBarNotification" target="_blank" rel="external">https://github.com/jaydee3/JDStatusBarNotification</a><br>6：block工具包。将很多需要用delegate实现的方法整合成了block的形式<br>地址：<a href="https://github.com/zwaldowski/BlocksKit" target="_blank" rel="external">https://github.com/zwaldowski/BlocksKit</a><br>7：图片加载<br>地址：<a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">https://github.com/rs/SDWebImage</a><br>8：正则表达式<br>地址：<a href="https://github.com/wezm/RegexKitLite" target="_blank" rel="external">https://github.com/wezm/RegexKitLite</a><br>9：Masonry代码布局<br>地址：<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">https://github.com/SnapKit/Masonry</a><br>10：弹出窗<br>地址：<a href="https://github.com/sberrevoets/SDCAlertView" target="_blank" rel="external">https://github.com/sberrevoets/SDCAlertView</a><br>11:Button的样式<br>地址：<a href="https://github.com/mattlawer/BButton" target="_blank" rel="external">https://github.com/mattlawer/BButton</a><br>12：验证网络连接状态<br>地址：<a href="https://github.com/tonymillion/Reachability" target="_blank" rel="external">https://github.com/tonymillion/Reachability</a><br>13：自动计算表格行高<br>地址：<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">https://github.com/forkingdog/UITableView-FDTemplateLayoutCell</a><br>14：动画效果的启动页<br>地址：<a href="https://github.com/IFTTT/JazzHands" target="_blank" rel="external">https://github.com/IFTTT/JazzHands</a><br>15：iOS快速简单集成国内三大平台分享<br>地址：<a href="https://github.com/xumeng/XMShareModule" target="_blank" rel="external">https://github.com/xumeng/XMShareModule</a><br>16：五项能力值展示的五边形<br>地址：<a href="https://github.com/dsxNiubility/SXFiveScoreShow" target="_blank" rel="external">https://github.com/dsxNiubility/SXFiveScoreShow</a><br>17：自动识别网址号码邮箱和表情的label<br>地址：<a href="https://github.com/molon/MLEmojiLabel" target="_blank" rel="external">https://github.com/molon/MLEmojiLabel</a><br>18：IM对话功能的封装<br>地址：<a href="https://github.com/ZhipingYang/UUChatTableView" target="_blank" rel="external">https://github.com/ZhipingYang/UUChatTableView</a><br>19：字典转模型框架<br>地址：<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">https://github.com/CoderMJLee/MJExtension</a><br>20：下拉上拉刷数据<br>地址：<a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">https://github.com/CoderMJLee/MJRefresh</a><br>21：表格行左右划动菜单<br>地址：<a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" rel="external">https://github.com/MortimerGoro/MGSwipeTableCell</a><br>22:图文混搭<br>地址:<a href="https://github.com/zhouande/TLAttributedLabel" target="_blank" rel="external">https://github.com/zhouande/TLAttributedLabel</a><br>23:可以简单展示在UINavigationBar下方，类似Music app的播放列表视图，弹出菜单视图<br>地址：<a href="https://github.com/DrummerB/BFNavigationBarDrawer" target="_blank" rel="external">https://github.com/DrummerB/BFNavigationBarDrawer</a><br>24：比如筛选、模糊、优化、蒙版、调整大小、旋转以及保存等等。同时还提供了一个UIImageView子类从URL异步加载图片，并在下载完毕时展示图片。<br>地址：<a href="https://github.com/Nyx0uf/NYXImagesKit" target="_blank" rel="external">https://github.com/Nyx0uf/NYXImagesKit</a><br>25：底部TabBar<br>地址：<a href="https://github.com/robbdimitrov/RDVTabBarController" target="_blank" rel="external">https://github.com/robbdimitrov/RDVTabBarController</a><br>26:表情面版<br>地址：<a href="https://github.com/ayushgoel/AGEmojiKeyboard" target="_blank" rel="external">https://github.com/ayushgoel/AGEmojiKeyboard</a><br>27:记录框架<br>地址：<a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="external">https://github.com/CocoaLumberjack/CocoaLumberjack</a><br>28：IOS与javascript交互<br>地址：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">https://github.com/marcuswestin/WebViewJavascriptBridge</a><br>29：图表统计展示<br>地址：<a href="https://github.com/kevinzhow/PNChart" target="_blank" rel="external">https://github.com/kevinzhow/PNChart</a><br>30:appStore评分<br>地址：<a href="https://github.com/arashpayan/appirater" target="_blank" rel="external">https://github.com/arashpayan/appirater</a><br>31：iOS-Categories 扩展类大全<br>地址：<a href="https://github.com/shaojiankui/IOS-Categories" target="_blank" rel="external">https://github.com/shaojiankui/IOS-Categories</a><br>32：扫描二维码，仿微信效果，带有扫描条<br>地址：<a href="https://github.com/JxbSir/JxbScanQR" target="_blank" rel="external">https://github.com/JxbSir/JxbScanQR</a><br>33:动效弹出视图(弹出窗里面为文字，可以定义弹出的方向，及显示的时间)–AMPopTip<br>地址：<a href="https://github.com/andreamazz/AMPopTip" target="_blank" rel="external">https://github.com/andreamazz/AMPopTip</a><br>34:基于Masonry自动计算行高扩展<br>地址：<a href="https://github.com/632840804/HYBMasonryAutoCellHeight" target="_blank" rel="external">https://github.com/632840804/HYBMasonryAutoCellHeight</a><br>35:模仿新浪微博弹出菜单<br>地址：<a href="https://github.com/wwdc14/HyPopMenuView" target="_blank" rel="external">https://github.com/wwdc14/HyPopMenuView</a><br>36:搜索历史标签<br>地址：<a href="https://github.com/zhiwupei/SearchHistory" target="_blank" rel="external">https://github.com/zhiwupei/SearchHistory</a><br>37：快速集成新手引导的类库<br>地址：<a href="https://github.com/StrongX/XSportLight" target="_blank" rel="external">https://github.com/StrongX/XSportLight</a><br>38：设置页面的封装<br>地址：<a href="https://github.com/renzifeng/ZFSetting" target="_blank" rel="external">https://github.com/renzifeng/ZFSetting</a><br>39：带箭头的弹出视图插件<br>地址：<a href="https://github.com/xiekw2010/DXPopover" target="_blank" rel="external">https://github.com/xiekw2010/DXPopover</a><br>40：下拉菜单插件<br>地址：<a href="https://github.com/dopcn/DOPDropDownMenu/" target="_blank" rel="external">https://github.com/dopcn/DOPDropDownMenu/</a><br>41：表格空白提示插件<br>地址：<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="external">https://github.com/dzenbot/DZNEmptyDataSet</a><br>42:给任意UIView视图四条边框加上阴影，可以自定义阴影的颜色、粗细程度、透明程度以及位置（上下左右边框）<br>地址：<a href="https://github.com/Seitk/UIView-Shadow-Maker" target="_blank" rel="external">https://github.com/Seitk/UIView-Shadow-Maker</a><br>43:不错的日期时间插件<br>地址：<a href="https://github.com/CoderXL/UUDatePicker" target="_blank" rel="external">https://github.com/CoderXL/UUDatePicker</a><br>44:底部弹出选择<br>地址：<a href="https://github.com/skywinder/ActionSheetPicker-3.0" target="_blank" rel="external">https://github.com/skywinder/ActionSheetPicker-3.0</a><br>45:比较不错的引导页面插件<br>地址：<a href="https://github.com/ealeksandrov/EAIntroView" target="_blank" rel="external">https://github.com/ealeksandrov/EAIntroView</a><br>46:两个APP跳转的插件<br>地址：<a href="https://github.com/usebutton/DeepLinkKit" target="_blank" rel="external">https://github.com/usebutton/DeepLinkKit</a><br>47:本地存取NSUserDefaults插件<br>地址：<a href="https://github.com/gangverk/GVUserDefaults" target="_blank" rel="external">https://github.com/gangverk/GVUserDefaults</a><br>48:NSArray 和 NSDictionary关于LINQ的操作方式，封装一些常用的操作<br>地址：<a href="https://github.com/ColinEberhardt/LinqToObjectiveC" target="_blank" rel="external">https://github.com/ColinEberhardt/LinqToObjectiveC</a><br>49:可以监控网络请求的内容<br>地址：<a href="https://github.com/coderyi/NetworkEye" target="_blank" rel="external">https://github.com/coderyi/NetworkEye</a><br>50：时间帮助插件，可以快速获取时间，比较，增加等操作<br>地址：<a href="https://github.com/MatthewYork/DateTools" target="_blank" rel="external">https://github.com/MatthewYork/DateTools</a><br>51: 不错的链式动作<br>地址：<a href="https://github.com/jhurray/JHChainableAnimations" target="_blank" rel="external">https://github.com/jhurray/JHChainableAnimations</a><br>52:弹出层视图，背景效果（可以自定义视图的内容）<br>地址：<a href="https://github.com/HJaycee/JCAlertView" target="_blank" rel="external">https://github.com/HJaycee/JCAlertView</a><br>53:圆形进度条的显示，中间可显示值<br>地址：<a href="https://github.com/mdinacci/MDRadialProgress" target="_blank" rel="external">https://github.com/mdinacci/MDRadialProgress</a><br>54:很帅的数据加载动画（可以用于数据列表加载的展现）<br>地址：<a href="https://github.com/NghiaTranUIT/FeSpinner" target="_blank" rel="external">https://github.com/NghiaTranUIT/FeSpinner</a><br>55:一个开源的AFnetworking上层的封装（猿题库等运用）<br>地址：<a href="https://github.com/yuantiku/YTKNetwork" target="_blank" rel="external">https://github.com/yuantiku/YTKNetwork</a><br>56:CBStoreHouseRefreshControl：一个效果很酷炫的下拉刷新控件<br>地址：<a href="https://github.com/coolbeet/CBStoreHouseRefreshControl" target="_blank" rel="external">https://github.com/coolbeet/CBStoreHouseRefreshControl</a><br>57:AFNetworking-RACExtensions:针对ReactiveCocoa的AF封装<br>地址：<a href="https://github.com/CodaFi/AFNetworking-RACExtensions" target="_blank" rel="external">https://github.com/CodaFi/AFNetworking-RACExtensions</a><br>58:模糊效果（毛玻璃）<br>地址：<a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="external">https://github.com/nicklockwood/FXBlurView</a><br>二：源代码实例<br>1:Coding.net客户端<br>地址：<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">https://coding.net/u/coding/p/Coding-iOS/git</a><br>2:高仿美团iOS版<br>地址：<a href="https://github.com/lookingstars/meituan" target="_blank" rel="external">https://github.com/lookingstars/meituan</a><br>3:模仿网易新闻做的精仿网易新闻<br>地址：<a href="https://github.com/dsxNiubility/SXNews" target="_blank" rel="external">https://github.com/dsxNiubility/SXNews</a><br>4:支付宝高仿版<br>地址：<a href="https://github.com/gsdios/GSD_ZHIFUBAO" target="_blank" rel="external">https://github.com/gsdios/GSD_ZHIFUBAO</a><br>5:高仿百度传课iOS版<br>地址：<a href="https://github.com/lookingstars/chuanke" target="_blank" rel="external">https://github.com/lookingstars/chuanke</a><br>6：模仿一元云购<br>地址：<a href="https://github.com/JxbSir/YiYuanYunGou" target="_blank" rel="external">https://github.com/JxbSir/YiYuanYunGou</a><br>7：wordpress源代码<br>地址：<a href="https://github.com/wordpress-mobile/WordPress-iOS" target="_blank" rel="external">https://github.com/wordpress-mobile/WordPress-iOS</a><br>8：v2ex源代码（文章类型，若报SVProgressHUD错，则把Podfile中的SVProgressHUD移除）<br>地址：<a href="https://github.com/singro/v2ex" target="_blank" rel="external">https://github.com/singro/v2ex</a><br>9:PHPHub客户端(IOS8.0以上)<br>地址：<a href="https://github.com/Aufree/phphub-ios" target="_blank" rel="external">https://github.com/Aufree/phphub-ios</a><br>10:快速搭建项目源代码<br>地址：<a href="https://github.com/wujunyang/MobileProject" target="_blank" rel="external">https://github.com/wujunyang/MobileProject</a><br>三：辅助软件<br>1：XCODE文档注解插件VVDocumenter<br>地址：<a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">https://github.com/onevcat/VVDocumenter-Xcode</a><br>2：将JSON格式化输出为模型的属性<br>地址：<a href="https://github.com/EnjoySR/ESJsonFormat-Xcode" target="_blank" rel="external">https://github.com/EnjoySR/ESJsonFormat-Xcode</a><br>3：图片提示插件<br>地址：<a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="external">https://github.com/ksuther/KSImageNamed-Xcode</a><br>4：图片转换插件<br>地址：<a href="https://github.com/rickytan/RTImageAssets" target="_blank" rel="external">https://github.com/rickytan/RTImageAssets</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一：第三方插件&lt;br&gt;1:基于响应式编程思想的oc&lt;br&gt;地址：&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.co
    
    </summary>
    
      <category term="developer" scheme="http://www.jeyblogs.com/categories/developer/"/>
    
    
      <category term="第三方资源" scheme="http://www.jeyblogs.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Xcode常用快捷键，网上找的总结一下，特别是格式化代码</title>
    <link href="http://www.jeyblogs.com/2013/08/12/Xcode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%8C%E7%BD%91%E4%B8%8A%E6%89%BE%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%89%B9%E5%88%AB%E6%98%AF%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.jeyblogs.com/2013/08/12/Xcode常用快捷键，网上找的总结一下，特别是格式化代码/</id>
    <published>2013-08-12T08:06:36.000Z</published>
    <updated>2016-08-15T07:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>隐藏xcode command+h<br>退出xcode command+q<br>关闭窗口 command+w<br>关闭所有窗口 command+option+w<br>关闭当前项目 command+control+w<br>关闭当前文件 command+shift+w<br>保存文件 command+s<br>保存所有文件 command+option+s<br>还原到保存时状态 command+u<br>项目中查找 command+shift+F<br>查找下一个 command+g<br>查找上一个 command+shift+g<br>浏览源文件 command+Double Click<br>打开头文件 command+shift+d<br>切换头/源文件 command+option+上箭头</p>
<p>撤销 command+z<br>重复 command+shift+z<br>剪切 command+x<br>复制 command+c<br>粘贴 command+v<br>粘贴并匹配格式 command+option+shift+v<br>全选 command+a<br>注释 command+/<br>文件首行 command+上箭头<br>文件末 command+下箭头<br>行首 command+左箭头<br>行末 command+右箭头<br>上一单词 option+左箭头<br>下一单词 option+右箭头<br>上一拆分单词 control+左箭头<br>下一拆分单词 control+右箭头<br>Tab ：接受代码提示<br>Esc ：显示代码提示菜单<br>下个Build警告或错误 command+=<br>前个Build警告或错误 command+shift+=<br>以调试方式运行程序 command+y<br>继续（在调试中）command+option+p<br>编译运行 command+r</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隐藏xcode command+h&lt;br&gt;退出xcode command+q&lt;br&gt;关闭窗口 command+w&lt;br&gt;关闭所有窗口 command+option+w&lt;br&gt;关闭当前项目 command+control+w&lt;br&gt;关闭当前文件 command+shift+w
    
    </summary>
    
      <category term="xcode" scheme="http://www.jeyblogs.com/categories/xcode/"/>
    
    
      <category term="xcode" scheme="http://www.jeyblogs.com/tags/xcode/"/>
    
  </entry>
  
</feed>
